/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Authorizable,
  AuthorizableInterface,
} from "../../../contracts/libraries/Authorizable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_toAdd",
        type: "address",
      },
    ],
    name: "addAuthorized",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "authorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_toRemove",
        type: "address",
      },
    ],
    name: "removeAuthorized",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6107ba8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063485d7d9414610067578063715018a6146100835780638da5cb5b1461008d578063b9181611146100ab578063cf1c316a146100db578063f2fde38b146100f7575b600080fd5b610081600480360381019061007c91906105a3565b610113565b005b61008b610223565b005b6100956102ab565b6040516100a29190610630565b60405180910390f35b6100c560048036038101906100c091906105a3565b6102d4565b6040516100d2919061064b565b60405180910390f35b6100f560048036038101906100f091906105a3565b6102f4565b005b610111600480360381019061010c91906105a3565b6103ca565b005b61011b6104c2565b73ffffffffffffffffffffffffffffffffffffffff166101396102ab565b73ffffffffffffffffffffffffffffffffffffffff161461018f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018690610686565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156101c857600080fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61022b6104c2565b73ffffffffffffffffffffffffffffffffffffffff166102496102ab565b73ffffffffffffffffffffffffffffffffffffffff161461029f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029690610686565b60405180910390fd5b6102a960006104ca565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60016020528060005260406000206000915054906101000a900460ff1681565b6102fc6104c2565b73ffffffffffffffffffffffffffffffffffffffff1661031a6102ab565b73ffffffffffffffffffffffffffffffffffffffff1614610370576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036790610686565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6103d26104c2565b73ffffffffffffffffffffffffffffffffffffffff166103f06102ab565b73ffffffffffffffffffffffffffffffffffffffff1614610446576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043d90610686565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ad90610666565b60405180910390fd5b6104bf816104ca565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061059d8161076d565b92915050565b6000602082840312156105b557600080fd5b60006105c38482850161058e565b91505092915050565b6105d5816106b7565b82525050565b6105e4816106c9565b82525050565b60006105f76026836106a6565b9150610602826106f5565b604082019050919050565b600061061a6020836106a6565b915061062582610744565b602082019050919050565b600060208201905061064560008301846105cc565b92915050565b600060208201905061066060008301846105db565b92915050565b6000602082019050818103600083015261067f816105ea565b9050919050565b6000602082019050818103600083015261069f8161060d565b9050919050565b600082825260208201905092915050565b60006106c2826106d5565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610776816106b7565b811461078157600080fd5b5056fea2646970667358221220d7fc091381e5b987ec5ea55e42ffac7857dd2f4534773d2327c3783882194eaa64736f6c63430008040033";

type AuthorizableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuthorizableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Authorizable__factory extends ContractFactory {
  constructor(...args: AuthorizableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Authorizable> {
    return super.deploy(overrides || {}) as Promise<Authorizable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Authorizable {
    return super.attach(address) as Authorizable;
  }
  override connect(signer: Signer): Authorizable__factory {
    return super.connect(signer) as Authorizable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuthorizableInterface {
    return new utils.Interface(_abi) as AuthorizableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Authorizable {
    return new Contract(address, _abi, signerOrProvider) as Authorizable;
  }
}
