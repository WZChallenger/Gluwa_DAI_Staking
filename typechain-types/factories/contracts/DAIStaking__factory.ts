/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DAIStaking,
  DAIStakingInterface,
} from "../../contracts/DAIStaking";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract yDAIToken",
        name: "_govToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    inputs: [],
    name: "END_TIMESTAMP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "START_TIMESTAMP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "exchange",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "getReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getUserRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newStartTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "period",
        type: "uint256",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardDebt",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e8638038062000e868339818101604052810190620000379190620000ee565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001ab565b600081519050620000d18162000177565b92915050565b600081519050620000e88162000191565b92915050565b600080604083850312156200010257600080fd5b60006200011285828601620000d7565b92505060206200012585828601620000c0565b9150509250929050565b60006200013c8262000157565b9050919050565b600062000150826200012f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b62000182816200012f565b81146200018e57600080fd5b50565b6200019c8162000143565b8114620001a857600080fd5b50565b610ccb80620001bb6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063781cd99d1161005b578063781cd99d1461013a578063a07c765f14610158578063b6b55f2514610176578063d2f7265a1461019257610088565b8063078b0fb71461008d5780631338736f146100bd5780631959a002146100d95780631c4b774b1461010a575b600080fd5b6100a760048036038101906100a29190610746565b61019c565b6040516100b49190610927565b60405180910390f35b6100d760048036038101906100d29190610798565b6101ed565b005b6100f360048036038101906100ee9190610746565b61029a565b604051610101929190610942565b60405180910390f35b610124600480360381019061011f919061076f565b6102be565b6040516101319190610927565b60405180910390f35b610142610397565b60405161014f9190610927565b60405180910390f35b61016061039d565b60405161016d9190610927565b60405180910390f35b610190600480360381019061018b919061076f565b6103a3565b005b61019a6104a4565b005b600080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010154915050919050565b6003548211610231576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610228906108c7565b60405180910390fd5b60008111610274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026b906108a7565b60405180910390fd5b81600281905550610290816002546105c290919063ffffffff16565b6003819055505050565b60046020528060005260406000206000915090508060000154908060010154905082565b6000806000905060025442101580156102d957506003544211155b156103645761035d655af3107a400061034f8561034160876103336301e1338061032564e8d4a51000610317426003546105d890919063ffffffff16565b6105ee90919063ffffffff16565b61060490919063ffffffff16565b6105ee90919063ffffffff16565b6105ee90919063ffffffff16565b61060490919063ffffffff16565b905061038e565b61038b606461037d6070866105ee90919063ffffffff16565b61060490919063ffffffff16565b90505b80915050919050565b60025481565b60035481565b600081116103e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dd906108e7565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506104408282600001546105c290919063ffffffff16565b81600001819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8360405161048e9190610927565b60405180910390a26104a0338361061a565b5050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600101541161052e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052590610907565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac3383600101546040518363ffffffff1660e01b815260040161058d92919061087e565b600060405180830381600087803b1580156105a757600080fd5b505af11580156105bb573d6000803e3d6000fd5b5050505050565b600081836105d0919061097c565b905092915050565b600081836105e69190610a5d565b905092915050565b600081836105fc9190610a03565b905092915050565b6000818361061291906109d2565b905092915050565b6000610625826102be565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984836040518363ffffffff1660e01b815260040161068292919061087e565b600060405180830381600087803b15801561069c57600080fd5b505af11580156106b0573d6000803e3d6000fd5b505050506000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061070e8282600101546105c290919063ffffffff16565b816001018190555050505050565b60008135905061072b81610c67565b92915050565b60008135905061074081610c7e565b92915050565b60006020828403121561075857600080fd5b60006107668482850161071c565b91505092915050565b60006020828403121561078157600080fd5b600061078f84828501610731565b91505092915050565b600080604083850312156107ab57600080fd5b60006107b985828601610731565b92505060206107ca85828601610731565b9150509250929050565b6107dd81610a91565b82525050565b60006107f0602f8361096b565b91506107fb82610b2b565b604082019050919050565b600061081360328361096b565b915061081e82610b7a565b604082019050919050565b600061083660328361096b565b915061084182610bc9565b604082019050919050565b600061085960288361096b565b915061086482610c18565b604082019050919050565b61087881610ac3565b82525050565b600060408201905061089360008301856107d4565b6108a0602083018461086f565b9392505050565b600060208201905081810360008301526108c0816107e3565b9050919050565b600060208201905081810360008301526108e081610806565b9050919050565b6000602082019050818103600083015261090081610829565b9050919050565b600060208201905081810360008301526109208161084c565b9050919050565b600060208201905061093c600083018461086f565b92915050565b6000604082019050610957600083018561086f565b610964602083018461086f565b9392505050565b600082825260208201905092915050565b600061098782610ac3565b915061099283610ac3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156109c7576109c6610acd565b5b828201905092915050565b60006109dd82610ac3565b91506109e883610ac3565b9250826109f8576109f7610afc565b5b828204905092915050565b6000610a0e82610ac3565b9150610a1983610ac3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a5257610a51610acd565b5b828202905092915050565b6000610a6882610ac3565b9150610a7383610ac3565b925082821015610a8657610a85610acd565b5b828203905092915050565b6000610a9c82610aa3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4441495374616b696e673a3a6c6f636b3a20706572696f64206d75737420626560008201527f2067726561746572207468616e20300000000000000000000000000000000000602082015250565b7f4441495374616b696e673a3a6c6f636b3a206c6f636b20706572696f6420636160008201527f6e6e6f74206265206f7665726c61707065640000000000000000000000000000602082015250565b7f4441495374616b696e673a3a6465706f7369743a20616d6f756e74206d75737460008201527f2062652067726561746572207468616e20300000000000000000000000000000602082015250565b7f4441495374616b696e673a3a6c6f636b3a206e6f20737570706c69656420616e60008201527f7920616d6f756e74000000000000000000000000000000000000000000000000602082015250565b610c7081610a91565b8114610c7b57600080fd5b50565b610c8781610ac3565b8114610c9257600080fd5b5056fea2646970667358221220df151423bafe716c2f6556f05b3300500e548f7c888c6cb100732169df92acb364736f6c63430008040033";

type DAIStakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DAIStakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DAIStaking__factory extends ContractFactory {
  constructor(...args: DAIStakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _govToken: string,
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DAIStaking> {
    return super.deploy(
      _govToken,
      _lpToken,
      overrides || {}
    ) as Promise<DAIStaking>;
  }
  override getDeployTransaction(
    _govToken: string,
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_govToken, _lpToken, overrides || {});
  }
  override attach(address: string): DAIStaking {
    return super.attach(address) as DAIStaking;
  }
  override connect(signer: Signer): DAIStaking__factory {
    return super.connect(signer) as DAIStaking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DAIStakingInterface {
    return new utils.Interface(_abi) as DAIStakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DAIStaking {
    return new Contract(address, _abi, signerOrProvider) as DAIStaking;
  }
}
